<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 卡里的技术博客</title>
    <link>http://gaocarri.top/post/</link>
    <description>Recent content in Posts on 卡里的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 30 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://gaocarri.top/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>自己实现React之useState</title>
      <link>http://gaocarri.top/post/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0react%E4%B9%8Busestate/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0react%E4%B9%8Busestate/</guid>
      <description>模拟useState useState原理深入 1.const [n,setN] = React.useState(0) 2.分析 setN会修改数据x，将n+1存入x setN一定会触发App的重新渲染（re-r</description>
    </item>
    
    <item>
      <title>React函数组件一篇讲通</title>
      <link>http://gaocarri.top/post/react%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%80%E7%AF%87%E8%AE%B2%E9%80%9A/</link>
      <pubDate>Thu, 21 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/react%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%80%E7%AF%87%E8%AE%B2%E9%80%9A/</guid>
      <description>函数组件相对简单，注意函数组件没有生命周期，但可以模拟生命周期 函数组件 基本写法 1 2 3 const App = ()=&amp;gt;{ return &amp;lt;div&amp;gt;app&amp;lt;/div&amp;gt; } 使用函数组件写一个加1 1 2 3 4 5 6 7 8 9 const</description>
    </item>
    
    <item>
      <title>React生命周期是什么</title>
      <link>http://gaocarri.top/post/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Mon, 18 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>React生命周期 1.类比代码 1 2 3 4 5 6 7 8 let div = document.ceateElement(&amp;#39;div&amp;#39;) // 这是div的create/construc过程 div.textContent= &amp;#39;hi&amp;#39; // 这是初始化state document.body.appendChild(div) // 这是di</description>
    </item>
    
    <item>
      <title>一篇说通React类组件</title>
      <link>http://gaocarri.top/post/%E4%B8%80%E7%AF%87%E8%AF%B4%E9%80%9Areact%E7%B1%BB%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E4%B8%80%E7%AF%87%E8%AF%B4%E9%80%9Areact%E7%B1%BB%E7%BB%84%E4%BB%B6/</guid>
      <description>类组件 1.ES6如何创建组件 1 2 3 4 5 6 7 8 9 10 import React from &amp;#39;react&amp;#39; class B extends React.Component{ constructor(props){ super(props) } render(){ return &amp;lt;div&amp;gt;hi&amp;lt;/div&amp;gt; } } 234行可以省掉（如果不需要在constructor里做什么</description>
    </item>
    
    <item>
      <title>Hooks个人参考手册</title>
      <link>http://gaocarri.top/post/hooks%E4%B8%AA%E4%BA%BA%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/hooks%E4%B8%AA%E4%BA%BA%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/</guid>
      <description>这是一篇个人参考手册！！！ Hooks 详解React Hooks useState 见上一篇博客 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const App = () =&amp;gt; { const [user, setUser] = React.useState({ name: &amp;#39;carri&amp;#39;, age: 18 }) const onClick = () =&amp;gt; { setUser({ ...user, name:</description>
    </item>
    
    <item>
      <title>浅析两种React组件</title>
      <link>http://gaocarri.top/post/%E6%B5%85%E6%9E%90%E4%B8%A4%E7%A7%8Dreact%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E6%B5%85%E6%9E%90%E4%B8%A4%E7%A7%8Dreact%E7%BB%84%E4%BB%B6/</guid>
      <description>React两种组件 1.函数组件 1 2 3 4 function Welcome(props){ return &amp;lt;h1&amp;gt;Hello,{props.name}&amp;lt;/h1&amp;gt; } &amp;lt;Welcome name=&amp;#34;carri&amp;#34; /&amp;gt; 2.类组件(注意this) 1 2 3 4 5 6 class Welcome extends React.Component{ return { &amp;lt;h1&amp;gt;Hello,{this.props.name}&amp;lt;/h1&amp;gt; } } &amp;lt;Welcome name=&amp;#34;carri&amp;#34; /&amp;gt; 3.关于这里的Welco</description>
    </item>
    
    <item>
      <title>JSX语法几步搞定</title>
      <link>http://gaocarri.top/post/jsx%E8%AF%AD%E6%B3%95%E5%87%A0%E6%AD%A5%E6%90%9E%E5%AE%9A/</link>
      <pubDate>Mon, 11 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/jsx%E8%AF%AD%E6%B3%95%E5%87%A0%E6%AD%A5%E6%90%9E%E5%AE%9A/</guid>
      <description>JSX注意事项 注意className 1 2 // 要写成 &amp;lt;div className=&amp;#34;red&amp;#34;&amp;gt;n&amp;lt;/div&amp;gt; 插入变量 标签里面的所有JS代码要用{}抱起来 如果有需要的变量n，难么就用{}把n包起来 如</description>
    </item>
    
    <item>
      <title>共享博客项目笔记</title>
      <link>http://gaocarri.top/post/%E5%85%B1%E4%BA%AB%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%85%B1%E4%BA%AB%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</guid>
      <description>Vuejs 黑曜石共享博客项目 黑曜石共享博客支持注册、登录 可使用markdown语法 功能包含博客的添加，删除，更改 在详情页面点击别的用户名可以查看个人</description>
    </item>
    
    <item>
      <title>如何将Vue项目部署到GitHub</title>
      <link>http://gaocarri.top/post/%E5%A6%82%E4%BD%95%E5%B0%86vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0github/</link>
      <pubDate>Fri, 10 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%A6%82%E4%BD%95%E5%B0%86vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0github/</guid>
      <description>部署 按照官方文档的指示 检查dist是否打包正确 1 2 3 4 5 yarn build yarn global add serve # 全局安装serve serve -s dist 部署到gitHub my-project===我</description>
    </item>
    
    <item>
      <title>EditLabel与Statistic组件以及ECharts</title>
      <link>http://gaocarri.top/post/editlabel%E4%B8%8Estatistic%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8Aecharts/</link>
      <pubDate>Tue, 07 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/editlabel%E4%B8%8Estatistic%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8Aecharts/</guid>
      <description>EditLabel页面 困扰我一个非常久的Bug,input表单输入数字结果不为数字 正确的解决办法 1 &amp;lt;input type=&amp;#34;text&amp;#34; v-model.number.trim=&amp;#34;recordItem.amount&amp;#34; /&amp;gt; 其实就是在v-model后面加上.</description>
    </item>
    
    <item>
      <title>Money组件的封装及思路</title>
      <link>http://gaocarri.top/post/money%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E5%8F%8A%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/money%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E5%8F%8A%E6%80%9D%E8%B7%AF/</guid>
      <description>Money.vue的封装 封装MoneyHead.vue,MoneyList.vue和MoneyContent.vue并引入Money 1 2 3 4</description>
    </item>
    
    <item>
      <title>Add组件的封装及思路</title>
      <link>http://gaocarri.top/post/add%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E5%8F%8A%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/add%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E5%8F%8A%E6%80%9D%E8%B7%AF/</guid>
      <description>Add.vue的封装 Add.vue的组件 1 2 3 4 5 6 7 8 @Component({ components: { Scroll, TabBar, NumberPad, TagTable } }) 在Add.vue中获取tagList,经过详细考虑我发现使用计算属</description>
    </item>
    
    <item>
      <title>Tags组件的封装以及思路</title>
      <link>http://gaocarri.top/post/tags%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E4%BB%A5%E5%8F%8A%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/tags%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E4%BB%A5%E5%8F%8A%E6%80%9D%E8%B7%AF/</guid>
      <description>Tags.vue的封装 Tags.vue拥有的组件 1 2 3 4 5 6 components: { Scroll, TagsNav, TagSelected, TagList } TagsNav的封装 无难点，注意判断完成的点击状态，以及compl</description>
    </item>
    
    <item>
      <title>页面布局Nav和Layout组件的封装</title>
      <link>http://gaocarri.top/post/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80nav%E5%92%8Clayout%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/</link>
      <pubDate>Mon, 23 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80nav%E5%92%8Clayout%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/</guid>
      <description>Nav.vue 底部导航栏的封装 1.svg的使用（使用svg-sprite-loader） iconfont.con下载svg shims-tsx.d.ts中</description>
    </item>
    
    <item>
      <title>在Vue&#43;TypeScript中使用Toast</title>
      <link>http://gaocarri.top/post/%E5%9C%A8vue&#43;typescript%E4%B8%AD%E4%BD%BF%E7%94%A8toast/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%9C%A8vue&#43;typescript%E4%B8%AD%E4%BD%BF%E7%94%A8toast/</guid>
      <description>TypeScript中使用toast 建立一个文件夹 toast 封装一个Toast组件(css略) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 &amp;lt;template&amp;gt; &amp;lt;div</description>
    </item>
    
    <item>
      <title>使用BetterScroll去除滚动条</title>
      <link>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8betterscroll%E5%8E%BB%E9%99%A4%E6%BB%9A%E5%8A%A8%E6%9D%A1/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8betterscroll%E5%8E%BB%E9%99%A4%E6%BB%9A%E5%8A%A8%E6%9D%A1/</guid>
      <description>BetterScroll 去除滚动条的简单使用方法 安装betterscroll 1 yarn add better-scroll 由于typescript的原因，需要安装 1 @types/better-scroll 封装一个通用的Scroll.vue</description>
    </item>
    
    <item>
      <title>黑曜石记账项目介绍</title>
      <link>http://gaocarri.top/post/%E9%BB%91%E6%9B%9C%E7%9F%B3%E8%AE%B0%E8%B4%A6%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E9%BB%91%E6%9B%9C%E7%9F%B3%E8%AE%B0%E8%B4%A6%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</guid>
      <description>黑曜石记账 平台：手机 包含界面 首页详情页面、账目编辑页面、添加记账页面、添加记账标签页面、图表统计页面 功能： 记账：金额 标签 备注 类型 管理标签：添</description>
    </item>
    
    <item>
      <title>Vue，TypeScript中使用toast</title>
      <link>http://gaocarri.top/post/vuetypescript%E4%B8%AD%E4%BD%BF%E7%94%A8toast/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vuetypescript%E4%B8%AD%E4%BD%BF%E7%94%A8toast/</guid>
      <description>前言 之前在使用js在Vue中用了toast，感觉挺简单的，但是使用TypeScript的时候发生了一些问题，正好总结一下toast的使用，以</description>
    </item>
    
    <item>
      <title>使用better-scroll去除滚动条的简易方法</title>
      <link>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8better-scroll%E5%8E%BB%E9%99%A4%E6%BB%9A%E5%8A%A8%E6%9D%A1%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8better-scroll%E5%8E%BB%E9%99%A4%E6%BB%9A%E5%8A%A8%E6%9D%A1%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/</guid>
      <description>前言 这段时间在做一个记账webApp；发现原生滚动条既难看也难用，本来打算将其隐藏了事，无奈试过很多方法都无法满足要求，于是想到了之前用过的</description>
    </item>
    
    <item>
      <title>深入理解Vue的sync修饰符</title>
      <link>http://gaocarri.top/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3vue%E7%9A%84sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Thu, 13 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3vue%E7%9A%84sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>说明 官方文档对.sync修饰符的解释：https://cn.vuejs.org/v2/guide/components-custom-eve</description>
    </item>
    
    <item>
      <title>Vue完整版与非完整版区别</title>
      <link>http://gaocarri.top/post/vue%E5%AE%8C%E6%95%B4%E7%89%88%E4%B8%8E%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E5%AE%8C%E6%95%B4%E7%89%88%E4%B8%8E%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88%E5%8C%BA%E5%88%AB/</guid>
      <description>官方文档的解释 总结 两个版本对应的文件名 完整版 文件名：vue.js和vue.min.js 含min的是压缩版，表示是在生产环境下给用户使用的版本</description>
    </item>
    
    <item>
      <title>JS描述数据结构与算法（五）</title>
      <link>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%BA%94/</link>
      <pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%BA%94/</guid>
      <description>包含红黑树与图论 红黑树 保持二叉搜索树的平衡性 为了能以较快的时间O(logN)来操作一棵树，我们需要保证树总是平衡的 至少大部分是平衡的，那么时</description>
    </item>
    
    <item>
      <title>JS描述数据结构与算法（四）</title>
      <link>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E5%9B%9B/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E5%9B%9B/</guid>
      <description>大过年仍然坚持学习 包含树与二叉搜索树 树 树的优点 综合了其他数据结构的优点（当然优点不足于盖过其他数据结构的优点，比如效率一般情况下没有哈希表高</description>
    </item>
    
    <item>
      <title>JS描述数据结构与算法（三）</title>
      <link>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%B8%89/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%B8%89/</guid>
      <description>包含集合与哈希表 集合 由一组无序的，不能重复的元素构成 一种特殊的数组，没有顺序，也不能重复 没有顺序意味着不能通过下标值访问，不能重复意味着相同</description>
    </item>
    
    <item>
      <title>记一次git push失败，提示connection timed out</title>
      <link>http://gaocarri.top/post/%E8%AE%B0%E4%B8%80%E6%AC%A1gitpush%E5%A4%B1%E8%B4%A5%E6%8F%90%E7%A4%BAconnection-timed-out/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E8%AE%B0%E4%B8%80%E6%AC%A1gitpush%E5%A4%B1%E8%B4%A5%E6%8F%90%E7%A4%BAconnection-timed-out/</guid>
      <description>首先，报错信息 1 2 3 4 ssh: connect to host github.com port 22: Connection timed out fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 这可能是防火墙导致的，解决方法参考官方帮助文档 https://help.github.com/en/github/authenticating-to-github/using-ssh-over-the-https-port 具体的解决</description>
    </item>
    
    <item>
      <title>JS描述数据结构与算法（二）</title>
      <link>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%BA%8C/</link>
      <pubDate>Tue, 14 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%BA%8C/</guid>
      <description>包含链表 链表 数组和链表优缺点 链表和数组一样，可以存储一系列的元素，但是链表和数组的实现机制完全不同 数组： 数组创建通常需要一段连续的内存空间（</description>
    </item>
    
    <item>
      <title>JS描述数据结构与算法（一）</title>
      <link>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%B8%80/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%B8%80/</guid>
      <description>包含数组，栈，队列（使用数组实现） 什么是算法和数据结构 数据结构：计算机中存储和组织数据的方式 算法：解决办法的逻辑/操作 数组 JS数组就是API</description>
    </item>
    
    <item>
      <title>Vue的响应式原理</title>
      <link>http://gaocarri.top/post/vue%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</guid>
      <description>Vue的响应式原理主要分为两大部分 修改数据，Vue内部监听数据的改变（Object.defineProperty 监听对象属性改变） 发布者订阅</description>
    </item>
    
    <item>
      <title>[Vue warn]: Error in render: TypeError: Cannot read property &#39;length&#39; of undefined解决方法</title>
      <link>http://gaocarri.top/post/cannot-read-property-length-of-undefined%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/cannot-read-property-length-of-undefined%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>今天在使用vue做项目的时候遇到了一个错误，不断尝试后终于找到了解决方法，顺便举一反三一波 错误及其解决方法 我给一个组件的子组件传递了一个对象</description>
    </item>
    
    <item>
      <title>Vue基础(三)--组件相关</title>
      <link>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%B8%89-%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%B8%89-%E7%BB%84%E4%BB%B6/</guid>
      <description>包含以下几个部分 组件注册 组件通信 父子组件相互访问 插槽 全局组件和局部组件的注册 全局组件 直接上代码,这样即注册了一个全局组件 1 2 3 4 5 6 7 8 Vue.component(&amp;#39;cpn&amp;#39;,{ template:</description>
    </item>
    
    <item>
      <title>Vue基础(二)--事件监听，条件判断，循环遍历，v-model</title>
      <link>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%BA%8C-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86v-model/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%BA%8C-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86v-model/</guid>
      <description>事件监听 分为以下三部分 v-on的基本使用 v-on的参数 v-on的修饰符 v-on的基本使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;h2&amp;gt;{{counter}}&amp;lt;/h2&amp;gt; &amp;lt;button @click=&amp;#34;increment&amp;#34;&amp;gt;+&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ...... &amp;lt;script&amp;gt;</description>
    </item>
    
    <item>
      <title>Vue基础(一)--插值操作，v-bind，计算属性</title>
      <link>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%B8%80-%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9Cv-bind%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%B8%80-%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9Cv-bind%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</guid>
      <description>Vue是一种渐进式框架，什么是渐进式框架 渐进式框架：即可以在项目中部分使用Vue，不必非要完全使用 Vue的MVVM Vue是一种MVVM框架。</description>
    </item>
    
    <item>
      <title>跨域以及实现跨域</title>
      <link>http://gaocarri.top/post/%E8%B7%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E8%B7%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F/</guid>
      <description>之前把Ajax弄懂了，现在回头再看跨域终于有了清晰的理解。 本文包括以下内容 什么是同源 什么是跨域 CORS实现跨域 JSONP实现跨域 什么是同源 如</description>
    </item>
    
    <item>
      <title>对于JS继承的理解</title>
      <link>http://gaocarri.top/post/%E5%AF%B9%E4%BA%8Ejs%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%AF%B9%E4%BA%8Ejs%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>同样又是一个查缺补漏，这几天疯狂看博客，把不清楚的知识给弄清楚 首先，谈JS的继承就得提到原型以及原型链，对象_proto_===其构造函数.</description>
    </item>
    
    <item>
      <title>call,apply和bind的使用</title>
      <link>http://gaocarri.top/post/callapply%E5%92%8Cbind%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/callapply%E5%92%8Cbind%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>同样是对之前知识的查缺补漏 call,apply,bind都可以用来指定this的值。 举例 1 2 3 4 5 6 7 8 9 10 11 12 13 const xw = { name:&amp;#39</description>
    </item>
    
    <item>
      <title>搞懂JS闭包</title>
      <link>http://gaocarri.top/post/%E6%90%9E%E6%87%82js%E9%97%AD%E5%8C%85/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E6%90%9E%E6%87%82js%E9%97%AD%E5%8C%85/</guid>
      <description>算是对之前学习的查缺补漏吧 本文包括： 闭包是什么 闭包的用途 闭包的缺点 闭包是什么 一句话概括：函数和函数内部能访问到的变量（也叫环境）的总和，就是</description>
    </item>
    
    <item>
      <title>使用Promise</title>
      <link>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8promise/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8promise/</guid>
      <description>虽说最近学到Vue了,但是突然发现自己对Promise的用法掌握的不怎么样,遂写一篇博客,也可以当作自己平常使用的参考。 内容包括以下几个部分</description>
    </item>
    
    <item>
      <title>认识MVC</title>
      <link>http://gaocarri.top/post/%E8%AE%A4%E8%AF%86mvc/</link>
      <pubDate>Fri, 29 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E8%AE%A4%E8%AF%86mvc/</guid>
      <description>花了几天的时间熟悉了MVC的思想，回头发现自己以前写的代码弱（太）爆（多）了，记一篇博客回顾所学。 以下内容代表自己的思考，结论并非一定正确。</description>
    </item>
    
    <item>
      <title>四种排序算法</title>
      <link>http://gaocarri.top/post/%E5%9B%9B%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sat, 23 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%9B%9B%E7%A7%8D%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</guid>
      <description>选择排序 之前入门了数据结构与算法，学了几种经典的排序，今天在这里把他记录下来 选择排序的思想，依次找到最小的数的index，把它取出来，再在去</description>
    </item>
    
    <item>
      <title>如何利用哈希表存储用户操作</title>
      <link>http://gaocarri.top/post/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%88%A9%E7%94%A8%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AD%98%E5%82%A8%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%A6%82%E4%BD%95%E5%9C%A8%E5%88%A9%E7%94%A8%E5%93%88%E5%B8%8C%E8%A1%A8%E5%AD%98%E5%82%A8%E7%94%A8%E6%88%B7%E6%93%8D%E4%BD%9C/</guid>
      <description>这几天学完jQuery尝试做了一个导航网站的小项目 github地址 为了实现页面刷新或重启后用户的新增网站不被删除，使用了哈希表将用户的数据存</description>
    </item>
    
    <item>
      <title>jQuery的使用</title>
      <link>http://gaocarri.top/post/jquery%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/jquery%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>这两天自己尝试了封装DOM，并且熟悉了jQuery，记一篇博客概述jQuery的基本使用方法。 jQuery如何获取元素 首先概括jQuery的</description>
    </item>
    
    <item>
      <title>如何优化DOM操作来优化性能</title>
      <link>http://gaocarri.top/post/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96dom%E6%93%8D%E4%BD%9C%E6%9D%A5%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%A6%82%E4%BD%95%E4%BC%98%E5%8C%96dom%E6%93%8D%E4%BD%9C%E6%9D%A5%E4%BC%98%E5%8C%96%E6%80%A7%E8%83%BD/</guid>
      <description>为什么DOM操作很慢 一句话概括：DOM对象本身也是一个js对象，所以严格来说，并不是操作这个对象慢，而是说操作了这个对象后，会触发一些浏览器</description>
    </item>
    
    <item>
      <title>自己画出JS世界</title>
      <link>http://gaocarri.top/post/%E8%87%AA%E5%B7%B1%E7%94%BB%E5%87%BAjs%E4%B8%96%E7%95%8C/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E8%87%AA%E5%B7%B1%E7%94%BB%E5%87%BAjs%E4%B8%96%E7%95%8C/</guid>
      <description>关于一个JS世界是如何形成的？ 创建根对象#101(它有toString等属性)、根对象无名字（它的proto:null） 创建函数的原型#20</description>
    </item>
    
    <item>
      <title>JS函数执行时机</title>
      <link>http://gaocarri.top/post/js%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>今天学习到了关于JS函数执行时机方面的知识。 以下两个for循环各自独立 1 2 3 4 5 6 7 8 9 10 11 12 13 // 第一个： let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } // 第二个</description>
    </item>
    
    <item>
      <title>JS对象基本用法</title>
      <link>http://gaocarri.top/post/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>声明对象的两种语法 1 2 3 4 // 第1种： let obj = { &amp;#39;name&amp;#39;: &amp;#39;frank&amp;#39;, &amp;#39;age&amp;#39;: 18 } // 第2种： let obj = new Object({&amp;#39;name&amp;#39;: &amp;#39;frank&amp;#39;}) 键名必须是字符串，引号大部分时候可以省略（空格和中文时不可省） 就</description>
    </item>
    
    <item>
      <title>JS基本语法</title>
      <link>http://gaocarri.top/post/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>表达式和语句 表达式 1+2表达式的值是3 add(1,2)表达式的值是函数的返回值 console.log表达式的值为函数本身 console.lo</description>
    </item>
    
    <item>
      <title>初识JavaScript</title>
      <link>http://gaocarri.top/post/%E5%88%9D%E8%AF%86javascript/</link>
      <pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%88%9D%E8%AF%86javascript/</guid>
      <description>JavaScript的诞生(参考阮一峰的博客) 诞生: JavaScript由Brendan Eich于1995年发明（只花了十天）。 目的: 网景公</description>
    </item>
    
    <item>
      <title>CSS知识总结</title>
      <link>http://gaocarri.top/post/css%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/css%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</guid>
      <description>一、浏览器渲染原理 参考文章 Google团队写的文章 渲染树构建、布局及绘制 渲染性能 使用transform来实现动画 查看CSS各属性触发什么 CSSTriggers.com 浏</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>http://gaocarri.top/post/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E6%B5%85%E6%9E%90url/</guid>
      <description>IP的作用是什么 IP：Internet Protocol 约定了两件事情（作用） 如何定位一台设备 如何封装报文，和其他设备交流 几个特殊的IP 127.0.0.1表</description>
    </item>
    
    <item>
      <title>CSS的Float,Flex,Grid布局</title>
      <link>http://gaocarri.top/post/css%E7%9A%84floatflexgrid%E5%B8%83%E5%B1%80/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/css%E7%9A%84floatflexgrid%E5%B8%83%E5%B1%80/</guid>
      <description>如何选取布局 图片来自饥人谷 Float布局 子元素上加float:left和width 父元素classname上加 clearfix 1 2 3 4 5 clearfix{ content:&amp;#39;&amp;#39;; display:block; clear:both; } Flex</description>
    </item>
    
  </channel>
</rss>