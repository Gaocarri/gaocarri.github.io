<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 卡里的技术博客</title>
    <link>http://gaocarri.top/post/</link>
    <description>Recent content in Posts on 卡里的技术博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 27 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://gaocarri.top/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>单页面应用docker&#43;nginx部署</title>
      <link>http://gaocarri.top/post/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8docker&#43;nginx%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Sat, 27 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8docker&#43;nginx%E9%83%A8%E7%BD%B2/</guid>
      <description>在公司实践了不少docker项目，总结了一套docker+nginx部署方案，以防忘记，为后续作参考。 Docker镜像构建 包含nginx配置</description>
    </item>
    
    <item>
      <title>qiankun的js沙箱源码解析</title>
      <link>http://gaocarri.top/post/qiankun%E7%9A%84js%E6%B2%99%E7%AE%B1%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 30 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/qiankun%E7%9A%84js%E6%B2%99%E7%AE%B1%E8%AF%A6%E8%A7%A3/</guid>
      <description>qiankun的沙箱种类 SnapshotSandbox （快照沙箱） LegacySandbox（支持单应用的代理沙箱） ProxySandbox（支持多应用的代理沙箱） LegacySandbox 和</description>
    </item>
    
    <item>
      <title>WebRTC浅析及在直播竞品中的使用</title>
      <link>http://gaocarri.top/post/webrtc%E6%B5%85%E6%9E%90%E5%8F%8A%E5%9C%A8%E7%9B%B4%E6%92%AD%E7%AB%9E%E5%93%81%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/webrtc%E6%B5%85%E6%9E%90%E5%8F%8A%E5%9C%A8%E7%9B%B4%E6%92%AD%E7%AB%9E%E5%93%81%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>最近mentor让调研了竞品中的新技术应用，总结内部分享后，这篇文章同样搬运到自己的博客中。 WebRTC简介 WebRTC（Web Real-Time Commu</description>
    </item>
    
    <item>
      <title>记录一次浏览器的HSTS策略引起的跨域问题</title>
      <link>http://gaocarri.top/post/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84hsts%E7%AD%96%E7%95%A5%E5%BC%95%E8%B5%B7%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 11 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84hsts%E7%AD%96%E7%95%A5%E5%BC%95%E8%B5%B7%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</guid>
      <description>这周工作发现在chrome和edge上发现访问http页面提示跨域，后端已经设置了CORS。 表现 第一次是个预检请求（没有预检的话不会报错，简</description>
    </item>
    
    <item>
      <title>入门微前端</title>
      <link>http://gaocarri.top/post/%E5%85%A5%E9%97%A8%E5%BE%AE%E5%89%8D%E7%AB%AF/</link>
      <pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%85%A5%E9%97%A8%E5%BE%AE%E5%89%8D%E7%AB%AF/</guid>
      <description>最近开始了公司项目的微前端改造，从零开始接触了微前端。 微前端定义 微前端是一种类似微服务的架构，他将微服务的理念应用到浏览器端。 简单来说，将一</description>
    </item>
    
    <item>
      <title>手写一个自己的Promise</title>
      <link>http://gaocarri.top/post/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84promise/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E6%89%8B%E5%86%99%E4%B8%80%E4%B8%AA%E8%87%AA%E5%B7%B1%E7%9A%84promise/</guid>
      <description>话不多说，直接上代码 Promise手写 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 function MyPromise(executor){ let self = this self.status=&amp;#39;pending&amp;#39; self.value=undefined self.reason = undefined self.fullfilledCallbacks=[] self.rejectedCallbacks=[] function resolve(value){ if(self.status===&amp;#39;pending&amp;#39;){ self.status = &amp;#39;fullfilled&amp;#39; self.value</description>
    </item>
    
    <item>
      <title>video标签问题记录</title>
      <link>http://gaocarri.top/post/video%E6%A0%87%E7%AD%BE%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/video%E6%A0%87%E7%AD%BE%E8%AF%A6%E8%A7%A3/</guid>
      <description>工作之后好久没写博客了，最近1024程序员节部门让我做了一个彩蛋项目，做完当天展示的时候源码被公司各种大佬扒，尴尬到脚抠地抠出三室一厅&amp;he</description>
    </item>
    
    <item>
      <title>axios拦截器原理</title>
      <link>http://gaocarri.top/post/axios%E6%8B%A6%E6%88%AA%E5%99%A8%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 29 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/axios%E6%8B%A6%E6%88%AA%E5%99%A8%E5%8E%9F%E7%90%86/</guid>
      <description>拦截器是什么 页面发送http请求时，很多情况我们要对请求和其响应进行特定的处理； 例如 每个请求都附带后端返回的token 拿到response之</description>
    </item>
    
    <item>
      <title>Vue冷门api之provide</title>
      <link>http://gaocarri.top/post/vue%E5%86%B7%E9%97%A8api%E4%B9%8Bprovide/</link>
      <pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E5%86%B7%E9%97%A8api%E4%B9%8Bprovide/</guid>
      <description>常见的组件通信方式 props eventBus ref与$children,$parent访问组件实例 Vuex 以上不做赘述了 provide/inject作用 我们先来看看官网</description>
    </item>
    
    <item>
      <title>CSS关于文本换行与不换行的那些事</title>
      <link>http://gaocarri.top/post/css%E5%85%B3%E4%BA%8E%E6%96%87%E6%9C%AC%E6%8D%A2%E8%A1%8C%E4%B8%8E%E4%B8%8D%E6%8D%A2%E8%A1%8C%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/css%E5%85%B3%E4%BA%8E%E6%96%87%E6%9C%AC%E6%8D%A2%E8%A1%8C%E4%B8%8E%E4%B8%8D%E6%8D%A2%E8%A1%8C%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</guid>
      <description>关于换行的样式属性 标粗的是常用属性，会在后面的场景里用到 1.white-space: normal | pre | nowrap | pre-wrap | pre-line | inherit; white-space 属性设置如何处理元素内的空白 设值说明： normal 默认。空白会被浏览</description>
    </item>
    
    <item>
      <title>详述meta标签</title>
      <link>http://gaocarri.top/post/%E8%AF%A6%E8%BF%B0meta%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E8%AF%A6%E8%BF%B0meta%E6%A0%87%E7%AD%BE/</guid>
      <description>之前没怎么在意过meta，结果连charset都不知道，属实丢人。 于是查阅了很多资料，大体列举了一些常见的meta标签. meta标签是什么 m</description>
    </item>
    
    <item>
      <title>Vue关于data为什么是函数这件事</title>
      <link>http://gaocarri.top/post/vue%E5%85%B3%E4%BA%8Edata%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0%E8%BF%99%E4%BB%B6%E4%BA%8B/</link>
      <pubDate>Mon, 01 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E5%85%B3%E4%BA%8Edata%E4%B8%BA%E4%BB%80%E4%B9%88%E6%98%AF%E5%87%BD%E6%95%B0%E8%BF%99%E4%BB%B6%E4%BA%8B/</guid>
      <description>Vue组件data为什么是函数，面试的时候被问到了，感觉解释的不太清楚，借博客整理一下 什么是Vue组件 这里先借用官方的解释: 组件是可复用的 Vue</description>
    </item>
    
    <item>
      <title>彻底搞懂301和302状态码</title>
      <link>http://gaocarri.top/post/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82301%E5%92%8C302%E7%8A%B6%E6%80%81%E7%A0%81/</link>
      <pubDate>Wed, 17 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82301%E5%92%8C302%E7%8A%B6%E6%80%81%E7%A0%81/</guid>
      <description>彻底搞懂301和302Http状态码 ​ 一直以来对301和302状态码的认识都处于知道是什么，却不知道怎么做的状态，在翻阅许多资料后，总结了本</description>
    </item>
    
    <item>
      <title>Hooks个人参考手册</title>
      <link>http://gaocarri.top/post/hooks%E4%B8%AA%E4%BA%BA%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/</link>
      <pubDate>Sun, 03 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/hooks%E4%B8%AA%E4%BA%BA%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C/</guid>
      <description>这是一篇个人参考手册！！！ Hooks 详解React Hooks useState 见上一篇博客 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 const App = () =&amp;gt; { const [user, setUser] = React.useState({ name: &amp;#39;carri&amp;#39;, age: 18 }) const onClick = () =&amp;gt; { setUser({ ...user, name:</description>
    </item>
    
    <item>
      <title>自己实现React之useState</title>
      <link>http://gaocarri.top/post/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0react%E4%B9%8Busestate/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0react%E4%B9%8Busestate/</guid>
      <description>模拟useState useState原理深入 1.const [n,setN] = React.useState(0) 2.分析 setN会修改数据x，将n+1存入x setN一定会触发App的重新渲染（re-r</description>
    </item>
    
    <item>
      <title>React函数组件一篇讲通</title>
      <link>http://gaocarri.top/post/react%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%80%E7%AF%87%E8%AE%B2%E9%80%9A/</link>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/react%E5%87%BD%E6%95%B0%E7%BB%84%E4%BB%B6%E4%B8%80%E7%AF%87%E8%AE%B2%E9%80%9A/</guid>
      <description>函数组件相对简单，注意函数组件没有生命周期，但可以模拟生命周期 函数组件 基本写法 1 2 3 const App = ()=&amp;gt;{ return &amp;lt;div&amp;gt;app&amp;lt;/div&amp;gt; } 使用函数组件写一个加1 1 2 3 4 5 6 7 8 9 const</description>
    </item>
    
    <item>
      <title>React生命周期是什么</title>
      <link>http://gaocarri.top/post/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%98%AF%E4%BB%80%E4%B9%88/</link>
      <pubDate>Thu, 10 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E6%98%AF%E4%BB%80%E4%B9%88/</guid>
      <description>React生命周期 1.类比代码 1 2 3 4 5 6 7 8 let div = document.ceateElement(&amp;#39;div&amp;#39;) // 这是div的create/construc过程 div.textContent= &amp;#39;hi&amp;#39; // 这是初始化state document.body.appendChild(div) // 这是di</description>
    </item>
    
    <item>
      <title>JSX语法几步搞定</title>
      <link>http://gaocarri.top/post/jsx%E8%AF%AD%E6%B3%95%E5%87%A0%E6%AD%A5%E6%90%9E%E5%AE%9A/</link>
      <pubDate>Sun, 25 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/jsx%E8%AF%AD%E6%B3%95%E5%87%A0%E6%AD%A5%E6%90%9E%E5%AE%9A/</guid>
      <description>JSX注意事项 注意className 1 2 // 要写成 &amp;lt;div className=&amp;#34;red&amp;#34;&amp;gt;n&amp;lt;/div&amp;gt; 插入变量 标签里面的所有JS代码要用{}抱起来 如果有需要的变量n，难么就用{}把n包起来 如</description>
    </item>
    
    <item>
      <title>共享博客项目笔记</title>
      <link>http://gaocarri.top/post/%E5%85%B1%E4%BA%AB%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 11 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%85%B1%E4%BA%AB%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0/</guid>
      <description>Vuejs 黑曜石共享博客项目 黑曜石共享博客支持注册、登录 可使用markdown语法 功能包含博客的添加，删除，更改 在详情页面点击别的用户名可以查看个人</description>
    </item>
    
    <item>
      <title>如何将Vue项目部署到GitHub</title>
      <link>http://gaocarri.top/post/%E5%A6%82%E4%BD%95%E5%B0%86vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0github/</link>
      <pubDate>Mon, 10 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%A6%82%E4%BD%95%E5%B0%86vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0github/</guid>
      <description>部署 按照官方文档的指示 检查dist是否打包正确 1 2 3 4 5 yarn build yarn global add serve # 全局安装serve serve -s dist 部署到gitHub my-project===我</description>
    </item>
    
    <item>
      <title>EditLabel与Statistic组件以及ECharts</title>
      <link>http://gaocarri.top/post/editlabel%E4%B8%8Estatistic%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8Aecharts/</link>
      <pubDate>Fri, 07 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/editlabel%E4%B8%8Estatistic%E7%BB%84%E4%BB%B6%E4%BB%A5%E5%8F%8Aecharts/</guid>
      <description>EditLabel页面 困扰我一个非常久的Bug,input表单输入数字结果不为数字 正确的解决办法 1 &amp;lt;input type=&amp;#34;text&amp;#34; v-model.number.trim=&amp;#34;recordItem.amount&amp;#34; /&amp;gt; 其实就是在v-model后面加上.</description>
    </item>
    
    <item>
      <title>Money组件的封装及思路</title>
      <link>http://gaocarri.top/post/money%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E5%8F%8A%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/money%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E5%8F%8A%E6%80%9D%E8%B7%AF/</guid>
      <description>Money.vue的封装 封装MoneyHead.vue,MoneyList.vue和MoneyContent.vue并引入Money 1 2 3 4</description>
    </item>
    
    <item>
      <title>Add组件的封装及思路</title>
      <link>http://gaocarri.top/post/add%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E5%8F%8A%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Thu, 30 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/add%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E5%8F%8A%E6%80%9D%E8%B7%AF/</guid>
      <description>Add.vue的封装 Add.vue的组件 1 2 3 4 5 6 7 8 @Component({ components: { Scroll, TabBar, NumberPad, TagTable } }) 在Add.vue中获取tagList,经过详细考虑我发现使用计算属</description>
    </item>
    
    <item>
      <title>Tags组件的封装以及思路</title>
      <link>http://gaocarri.top/post/tags%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E4%BB%A5%E5%8F%8A%E6%80%9D%E8%B7%AF/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/tags%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85%E4%BB%A5%E5%8F%8A%E6%80%9D%E8%B7%AF/</guid>
      <description>Tags.vue的封装 Tags.vue拥有的组件 1 2 3 4 5 6 components: { Scroll, TagsNav, TagSelected, TagList } TagsNav的封装 无难点，注意判断完成的点击状态，以及compl</description>
    </item>
    
    <item>
      <title>页面布局Nav和Layout组件的封装</title>
      <link>http://gaocarri.top/post/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80nav%E5%92%8Clayout%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/</link>
      <pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80nav%E5%92%8Clayout%E7%BB%84%E4%BB%B6%E7%9A%84%E5%B0%81%E8%A3%85/</guid>
      <description>Nav.vue 底部导航栏的封装 1.svg的使用（使用svg-sprite-loader） iconfont.con下载svg shims-tsx.d.ts中</description>
    </item>
    
    <item>
      <title>在Vue&#43;TypeScript中使用Toast</title>
      <link>http://gaocarri.top/post/%E5%9C%A8vue&#43;typescript%E4%B8%AD%E4%BD%BF%E7%94%A8toast/</link>
      <pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%9C%A8vue&#43;typescript%E4%B8%AD%E4%BD%BF%E7%94%A8toast/</guid>
      <description>TypeScript中使用toast 建立一个文件夹 toast 封装一个Toast组件(css略) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 &amp;lt;template&amp;gt; &amp;lt;div</description>
    </item>
    
    <item>
      <title>使用BetterScroll去除滚动条</title>
      <link>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8betterscroll%E5%8E%BB%E9%99%A4%E6%BB%9A%E5%8A%A8%E6%9D%A1/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8betterscroll%E5%8E%BB%E9%99%A4%E6%BB%9A%E5%8A%A8%E6%9D%A1/</guid>
      <description>BetterScroll 去除滚动条的简单使用方法 安装betterscroll 1 yarn add better-scroll 由于typescript的原因，需要安装 1 @types/better-scroll 封装一个通用的Scroll.vue</description>
    </item>
    
    <item>
      <title>黑曜石记账项目介绍</title>
      <link>http://gaocarri.top/post/%E9%BB%91%E6%9B%9C%E7%9F%B3%E8%AE%B0%E8%B4%A6%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E9%BB%91%E6%9B%9C%E7%9F%B3%E8%AE%B0%E8%B4%A6%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D/</guid>
      <description>黑曜石记账 平台：手机 包含界面 首页详情页面、账目编辑页面、添加记账页面、添加记账标签页面、图表统计页面 功能： 记账：金额 标签 备注 类型 管理标签：添</description>
    </item>
    
    <item>
      <title>一篇说通React类组件</title>
      <link>http://gaocarri.top/post/%E4%B8%80%E7%AF%87%E8%AF%B4%E9%80%9Areact%E7%B1%BB%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E4%B8%80%E7%AF%87%E8%AF%B4%E9%80%9Areact%E7%B1%BB%E7%BB%84%E4%BB%B6/</guid>
      <description>类组件 1.ES6如何创建组件 1 2 3 4 5 6 7 8 9 10 import React from &amp;#39;react&amp;#39; class B extends React.Component{ constructor(props){ super(props) } render(){ return &amp;lt;div&amp;gt;hi&amp;lt;/div&amp;gt; } } 234行可以省掉（如果不需要在constructor里做什么</description>
    </item>
    
    <item>
      <title>浅析两种React组件</title>
      <link>http://gaocarri.top/post/%E6%B5%85%E6%9E%90%E4%B8%A4%E7%A7%8Dreact%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E6%B5%85%E6%9E%90%E4%B8%A4%E7%A7%8Dreact%E7%BB%84%E4%BB%B6/</guid>
      <description>React两种组件 1.函数组件 1 2 3 4 function Welcome(props){ return &amp;lt;h1&amp;gt;Hello,{props.name}&amp;lt;/h1&amp;gt; } &amp;lt;Welcome name=&amp;#34;carri&amp;#34; /&amp;gt; 2.类组件(注意this) 1 2 3 4 5 6 class Welcome extends React.Component{ return { &amp;lt;h1&amp;gt;Hello,{this.props.name}&amp;lt;/h1&amp;gt; } } &amp;lt;Welcome name=&amp;#34;carri&amp;#34; /&amp;gt; 3.关于这里的Welco</description>
    </item>
    
    <item>
      <title>Vue，TypeScript中使用toast</title>
      <link>http://gaocarri.top/post/vuetypescript%E4%B8%AD%E4%BD%BF%E7%94%A8toast/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vuetypescript%E4%B8%AD%E4%BD%BF%E7%94%A8toast/</guid>
      <description>前言 之前在使用js在Vue中用了toast，感觉挺简单的，但是使用TypeScript的时候发生了一些问题，正好总结一下toast的使用，以</description>
    </item>
    
    <item>
      <title>使用better-scroll去除滚动条的简易方法</title>
      <link>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8better-scroll%E5%8E%BB%E9%99%A4%E6%BB%9A%E5%8A%A8%E6%9D%A1%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/</link>
      <pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8better-scroll%E5%8E%BB%E9%99%A4%E6%BB%9A%E5%8A%A8%E6%9D%A1%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/</guid>
      <description>前言 这段时间在做一个记账webApp；发现原生滚动条既难看也难用，本来打算将其隐藏了事，无奈试过很多方法都无法满足要求，于是想到了之前用过的</description>
    </item>
    
    <item>
      <title>深入理解Vue的sync修饰符</title>
      <link>http://gaocarri.top/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3vue%E7%9A%84sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Wed, 15 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3vue%E7%9A%84sync%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>说明 官方文档对.sync修饰符的解释：https://cn.vuejs.org/v2/guide/components-custom-eve</description>
    </item>
    
    <item>
      <title>Vue完整版与非完整版区别</title>
      <link>http://gaocarri.top/post/vue%E5%AE%8C%E6%95%B4%E7%89%88%E4%B8%8E%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E5%AE%8C%E6%95%B4%E7%89%88%E4%B8%8E%E9%9D%9E%E5%AE%8C%E6%95%B4%E7%89%88%E5%8C%BA%E5%88%AB/</guid>
      <description>官方文档的解释 总结 两个版本对应的文件名 完整版 文件名：vue.js和vue.min.js 含min的是压缩版，表示是在生产环境下给用户使用的版本</description>
    </item>
    
    <item>
      <title>记一次git push失败，提示connection timed out</title>
      <link>http://gaocarri.top/post/%E8%AE%B0%E4%B8%80%E6%AC%A1gitpush%E5%A4%B1%E8%B4%A5%E6%8F%90%E7%A4%BAconnection-timed-out/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E8%AE%B0%E4%B8%80%E6%AC%A1gitpush%E5%A4%B1%E8%B4%A5%E6%8F%90%E7%A4%BAconnection-timed-out/</guid>
      <description>首先，报错信息 1 2 3 4 ssh: connect to host github.com port 22: Connection timed out fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 这可能是防火墙导致的，解决方法参考官方帮助文档 https://help.github.com/en/github/authenticating-to-github/using-ssh-over-the-https-port 具体的解决</description>
    </item>
    
    <item>
      <title>JS描述数据结构与算法（五）</title>
      <link>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%BA%94/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%BA%94/</guid>
      <description>包含红黑树与图论 红黑树 保持二叉搜索树的平衡性 为了能以较快的时间O(logN)来操作一棵树，我们需要保证树总是平衡的 至少大部分是平衡的，那么时</description>
    </item>
    
    <item>
      <title>JS描述数据结构与算法（四）</title>
      <link>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E5%9B%9B/</link>
      <pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E5%9B%9B/</guid>
      <description>大过年仍然坚持学习 包含树与二叉搜索树 树 树的优点 综合了其他数据结构的优点（当然优点不足于盖过其他数据结构的优点，比如效率一般情况下没有哈希表高</description>
    </item>
    
    <item>
      <title>JS描述数据结构与算法（三）</title>
      <link>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%B8%89/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%B8%89/</guid>
      <description>包含集合与哈希表 集合 由一组无序的，不能重复的元素构成 一种特殊的数组，没有顺序，也不能重复 没有顺序意味着不能通过下标值访问，不能重复意味着相同</description>
    </item>
    
    <item>
      <title>JS描述数据结构与算法（二）</title>
      <link>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%BA%8C/</link>
      <pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%BA%8C/</guid>
      <description>包含链表 链表 数组和链表优缺点 链表和数组一样，可以存储一系列的元素，但是链表和数组的实现机制完全不同 数组： 数组创建通常需要一段连续的内存空间（</description>
    </item>
    
    <item>
      <title>JS描述数据结构与算法（一）</title>
      <link>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%B8%80/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/js%E6%8F%8F%E8%BF%B0%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%85%A5%E9%97%A8%E4%B8%80/</guid>
      <description>包含数组，栈，队列（使用数组实现） 什么是算法和数据结构 数据结构：计算机中存储和组织数据的方式 算法：解决办法的逻辑/操作 数组 JS数组就是API</description>
    </item>
    
    <item>
      <title>Vue的响应式原理</title>
      <link>http://gaocarri.top/post/vue%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86/</guid>
      <description>Vue的响应式原理主要分为两大部分 修改数据，Vue内部监听数据的改变（Object.defineProperty 监听对象属性改变） 发布者订阅</description>
    </item>
    
    <item>
      <title>[Vue warn]: Error in render: TypeError: Cannot read property &#39;length&#39; of undefined解决方法</title>
      <link>http://gaocarri.top/post/cannot-read-property-length-of-undefined%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Thu, 26 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/cannot-read-property-length-of-undefined%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>今天在使用vue做项目的时候遇到了一个错误，不断尝试后终于找到了解决方法，顺便举一反三一波 错误及其解决方法 我给一个组件的子组件传递了一个对象</description>
    </item>
    
    <item>
      <title>Vue基础(三)--组件相关</title>
      <link>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%B8%89--%E7%BB%84%E4%BB%B6/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%B8%89--%E7%BB%84%E4%BB%B6/</guid>
      <description>包含以下几个部分 组件注册 组件通信 父子组件相互访问 插槽 全局组件和局部组件的注册 全局组件 直接上代码,这样即注册了一个全局组件 1 2 3 4 5 6 7 8 Vue.component(&amp;#39;cpn&amp;#39;,{ template:</description>
    </item>
    
    <item>
      <title>Vue基础(二)--事件监听，条件判断，循环遍历，v-model</title>
      <link>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%BA%8C--%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86v-model/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%BA%8C--%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E6%9D%A1%E4%BB%B6%E5%88%A4%E6%96%AD%E5%BE%AA%E7%8E%AF%E9%81%8D%E5%8E%86v-model/</guid>
      <description>事件监听 分为以下三部分 v-on的基本使用 v-on的参数 v-on的修饰符 v-on的基本使用 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;h2&amp;gt;{{counter}}&amp;lt;/h2&amp;gt; &amp;lt;button @click=&amp;#34;increment&amp;#34;&amp;gt;+&amp;lt;/button&amp;gt; &amp;lt;/div&amp;gt; ...... &amp;lt;script&amp;gt;</description>
    </item>
    
    <item>
      <title>Vue基础(一)--插值操作，v-bind，计算属性</title>
      <link>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%B8%80--%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9Cv-bind%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/vue%E5%9F%BA%E7%A1%80%E4%B8%80--%E6%8F%92%E5%80%BC%E6%93%8D%E4%BD%9Cv-bind%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</guid>
      <description>Vue是一种渐进式框架，什么是渐进式框架 渐进式框架：即可以在项目中部分使用Vue，不必非要完全使用 Vue的MVVM Vue是一种MVVM框架。</description>
    </item>
    
    <item>
      <title>跨域以及实现跨域</title>
      <link>http://gaocarri.top/post/%E8%B7%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E8%B7%A8%E5%9F%9F%E4%BB%A5%E5%8F%8A%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F/</guid>
      <description>之前把Ajax弄懂了，现在回头再看跨域终于有了清晰的理解。 本文包括以下内容 什么是同源 什么是跨域 CORS实现跨域 JSONP实现跨域 什么是同源 如</description>
    </item>
    
    <item>
      <title>对于JS继承的理解</title>
      <link>http://gaocarri.top/post/%E5%AF%B9%E4%BA%8Ejs%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E5%AF%B9%E4%BA%8Ejs%E7%BB%A7%E6%89%BF%E7%9A%84%E7%90%86%E8%A7%A3/</guid>
      <description>同样又是一个查缺补漏，这几天疯狂看博客，把不清楚的知识给弄清楚 首先，谈JS的继承就得提到原型以及原型链，对象_proto_===其构造函数.</description>
    </item>
    
    <item>
      <title>call,apply和bind的使用</title>
      <link>http://gaocarri.top/post/callapply%E5%92%8Cbind%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/callapply%E5%92%8Cbind%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>同样是对之前知识的查缺补漏 call,apply,bind都可以用来指定this的值。 举例 1 2 3 4 5 6 7 8 9 10 11 12 13 const xw = { name:&amp;#39</description>
    </item>
    
    <item>
      <title>搞懂JS闭包</title>
      <link>http://gaocarri.top/post/%E6%90%9E%E6%87%82js%E9%97%AD%E5%8C%85/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E6%90%9E%E6%87%82js%E9%97%AD%E5%8C%85/</guid>
      <description>算是对之前学习的查缺补漏吧 本文包括： 闭包是什么 闭包的用途 闭包的缺点 闭包是什么 一句话概括：函数和函数内部能访问到的变量（也叫环境）的总和，就是</description>
    </item>
    
    <item>
      <title>使用Promise</title>
      <link>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8promise/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>http://gaocarri.top/post/%E4%BD%BF%E7%94%A8promise/</guid>
      <description>虽说最近学到Vue了,但是突然发现自己对Promise的用法掌握的不怎么样,遂写一篇博客,也可以当作自己平常使用的参考。 内容包括以下几个部分</description>
    </item>
    
  </channel>
</rss>
